{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPhwjIi8/GrcnsaULfxtrSU"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LBo2TJ-5tBS1"
      },
      "outputs": [],
      "source": [
        "import csv\n",
        "import glob\n",
        "\n",
        "def merge_csv_files(file_pattern, output_file):\n",
        "    with open(output_file, 'w', newline='') as outfile:\n",
        "        writer = csv.writer(outfile)\n",
        "        for filename in glob.glob(file_pattern):\n",
        "            with open(filename, 'r', newline='') as infile:\n",
        "                reader = csv.reader(infile)\n",
        "                writer.writerows(reader)\n",
        "\n",
        "# Specify the file pattern\n",
        "file_pattern = \"races_Asian-Black or African American-White_loan_purposes_1-31-32_year_*.csv\"\n",
        "\n",
        "# Specify the output file name\n",
        "output_file = \"merged_data.csv\"\n",
        "\n",
        "# Merge the files\n",
        "merge_csv_files(file_pattern, output_file)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import glob\n",
        "import os\n",
        "\n",
        "def merge_csv_files(directory, file_pattern, output_file):\n",
        "    \"\"\"\n",
        "    Merges multiple CSV files into a single output file.\n",
        "\n",
        "    Args:\n",
        "        directory (str): The directory containing the CSV files.\n",
        "        file_pattern (str): The file pattern to match CSV files.\n",
        "        output_file (str): The name of the output file.\n",
        "    \"\"\"\n",
        "    # Check if the directory exists\n",
        "    if not os.path.exists(directory):\n",
        "        raise FileNotFoundError(f\"Directory not found: {directory}\")\n"
      ],
      "metadata": {
        "id": "_VBF3WfBtIHt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "\n",
        "file_pattern = \"races_Asian-Black or African American-White_loan_purposes_1-31-32_year_*.csv\"\n",
        "matching_files = glob.glob(file_pattern)\n",
        "\n",
        "if not matching_files:\n",
        "    print(f\"No files found matching the pattern: {file_pattern}\")\n",
        "else:\n",
        "    print(f\"Found {len(matching_files)} files matching the pattern:\")\n",
        "    for file in matching_files:\n",
        "        print(file)\n",
        "        # Check if the files are empty:\n",
        "        if os.stat(file).st_size == 0:\n",
        "            print(f\"WARNING: File '{file}' is empty!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ni_3pduAwja2",
        "outputId": "2df1354c-4158-4621-bc97-ad46200e0456"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No files found matching the pattern: races_Asian-Black or African American-White_loan_purposes_1-31-32_year_*.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: show variable names of merged df\n",
        "\n",
        "import pandas as pd\n",
        "import glob\n",
        "\n",
        "def get_merged_df_variables(file_pattern):\n",
        "    \"\"\"\n",
        "    Gets the variable names of a merged dataframe.\n",
        "\n",
        "    Args:\n",
        "        file_pattern (str): The file pattern to match CSV files.\n",
        "\n",
        "    Returns:\n",
        "        list: A list of variable names in the merged dataframe, or None if no matching files found.\n",
        "    \"\"\"\n",
        "    matching_files = glob.glob(file_pattern)\n",
        "\n",
        "    if not matching_files:\n",
        "        print(f\"No files found matching the pattern: {file_pattern}\")\n",
        "        return None\n",
        "\n",
        "    try:\n",
        "        # Efficiently read the first file to get the column names.\n",
        "        # Assumes all files have the same structure.\n",
        "        df = pd.read_csv(matching_files[0])\n",
        "        return df.columns.tolist()\n",
        "\n",
        "    except pd.errors.EmptyDataError:\n",
        "        print(f\"WARNING: First file '{matching_files[0]}' is empty. Cannot determine variables.\")\n",
        "        return None\n",
        "    except FileNotFoundError:\n",
        "      print(f\"WARNING: No file found matching pattern: {file_pattern}\")\n",
        "      return None\n",
        "\n",
        "\n",
        "file_pattern = \"races_Asian-Black or African American-White_loan_purposes_1-31-32_year_*.csv\"\n",
        "variables = get_merged_df_variables(file_pattern)\n",
        "\n",
        "if variables:\n",
        "    print(\"Variable names in the merged dataframe:\")\n",
        "    for var in variables:\n",
        "var"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "LxFNihNVxG4z",
        "outputId": "4e118a38-06dc-4c1d-ca30-020fe3168845"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "expected an indented block after 'for' statement on line 41 (<ipython-input-8-9fdd8f1675ac>, line 42)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-8-9fdd8f1675ac>\"\u001b[0;36m, line \u001b[0;32m42\u001b[0m\n\u001b[0;31m    var\u001b[0m\n\u001b[0m       ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after 'for' statement on line 41\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: show variable names of merged df\n",
        "\n",
        "import pandas as pd\n",
        "import glob\n",
        "\n",
        "def get_merged_df_variables(file_pattern):\n",
        "    \"\"\"\n",
        "    Gets the variable names of a merged dataframe.\n",
        "\n",
        "    Args:\n",
        "        file_pattern (str): The file pattern to match CSV files.\n",
        "\n",
        "    Returns:\n",
        "        list: A list of variable names in the merged dataframe, or None if no matching files found.\n",
        "    \"\"\"\n",
        "    matching_files = glob.glob(file_pattern)\n",
        "\n",
        "    if not matching_files:\n",
        "        print(f\"No files found matching the pattern: {file_pattern}\")\n",
        "        return None\n",
        "\n",
        "    try:\n",
        "        # Efficiently read the first file to get the column names.\n",
        "        # Assumes all files have the same structure.\n",
        "        df = pd.read_csv(matching_files[0])\n",
        "        return df.columns.tolist()\n",
        "\n",
        "    except pd.errors.EmptyDataError:\n",
        "        print(f\"WARNING: First file '{matching_files[0]}' is empty. Cannot determine variables.\")\n",
        "        return None\n",
        "    except FileNotFoundError:\n",
        "      print(f\"WARNING: No file found matching pattern: {file_pattern}\")\n",
        "      return None\n",
        "\n",
        "\n",
        "file_pattern = \"races_Asian-Black or African American-White_loan_purposes_1-31-32_year_*.csv\"\n",
        "variables = get_merged_df_variables(file_pattern)\n",
        "\n",
        "if variables:\n",
        "    print(\"Variable names in the merged dataframe:\")\n",
        "    for var in variables:\n",
        "        print(var) # Added indentation to print each variable within the loop\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LaRZ0Ttsxg3q",
        "outputId": "c4c8409a-c3eb-48a6-bb13-b9156f13eea3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No files found matching the pattern: races_Asian-Black or African American-White_loan_purposes_1-31-32_year_*.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: create csv file\n",
        "\n",
        "import csv\n",
        "\n",
        "# Create a CSV file with sample data\n",
        "data = [\n",
        "    ['Name', 'Age', 'City'],\n",
        "    ['Alice', '25', 'New York'],\n",
        "    ['Bob', '30', 'Los Angeles'],\n",
        "    ['Charlie', '28', 'Chicago']\n",
        "]\n",
        "\n",
        "with open('example.csv', 'w', newline='') as csvfile:\n",
        "    writer = csv.writer(csvfile)\n",
        "    writer.writerows(data)\n",
        "\n",
        "print(\"CSV file 'example.csv' created successfully.\")"
      ],
      "metadata": {
        "id": "3sSlRMYuxjn0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: read csv C:\\Users\\sayaka\\Desktop\\Downloads\\cfpb_hmda-data-point-2022_data (2).zip, name = 2022hmda_data_fig_10. Hypothesis test\n",
        "\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "\n",
        "# Replace 'your_file.csv' with the actual path to your CSV file in Google Drive\n",
        "# or upload it and use the local path\n",
        "file_path = '/content/drive/My Drive/your_file.csv'  # Example path\n",
        "\n",
        "try:\n",
        "    # Read the CSV file into a pandas DataFrame\n",
        "    df = pd.read_csv(file_path)\n",
        "\n",
        "    # Replace 'column1' and 'column2' with the actual column names you want to compare\n",
        "    column1 = 'column1'\n",
        "    column2 = 'column2'\n",
        "\n",
        "    # Perform a two-sample t-test\n",
        "    t_statistic, p_value = stats.ttest_ind(df[column1], df[column2])\n",
        "\n",
        "    print(f\"T-statistic: {t_statistic}\")\n",
        "    print(f\"P-value: {p_value}\")\n",
        "\n",
        "    # Interpret the results\n",
        "    alpha = 0.05  # Significance level\n",
        "    if p_value < alpha:\n",
        "        print(\"Reject the null hypothesis. There is a statistically significant difference between the two groups.\")\n",
        "    else:\n",
        "        print(\"Fail to reject the null hypothesis. There is no statistically significant difference between the two groups.\")\n",
        "\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File not found at {file_path}\")\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0tjVk8RNdyDi",
        "outputId": "87d34f2a-1ec4-4868-a5ea-f3bf258db782"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: File not found at /content/drive/My Drive/your_file.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: read csv file\n",
        "\n",
        "# Assuming 'example.csv' is in the current working directory or you have mounted Google Drive\n",
        "try:\n",
        "    df = pd.read_csv('example.csv')\n",
        "    print(df)\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: 'example.csv' not found. Please ensure the file exists in the current directory or provide the correct path.\")"
      ],
      "metadata": {
        "id": "OZECJGqTf7Cs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PGkh29LJf60_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv('2022hmda_data_fig_10.csv')\n"
      ],
      "metadata": {
        "id": "101ZkjEKgezk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "6b260454-3ead-4709-d85d-baf6dfe670a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b6b43d48-4eb8-4d30-b18d-97bb46347051\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b6b43d48-4eb8-4d30-b18d-97bb46347051\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 2022hmda_data_fig_10.csv to 2022hmda_data_fig_10.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: hypothesis test; value = hpshare_asian , hpshare_hisp_white, hpshare_nonhisp_white, white\n",
        "\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "\n",
        "# Assuming your uploaded file is named '2022hmda_data_fig_10.csv'\n",
        "try:\n",
        "    df = pd.read_csv('2022hmda_data_fig_10.csv')\n",
        "\n",
        "    # Replace with your actual column names\n",
        "    columns_to_test = ['hpshare_asian', 'hpshare_hisp_white', 'hpshare_nonhisp_white', 'white']\n",
        "\n",
        "    # Perform t-tests for all possible pairs of columns\n",
        "    for i in range(len(columns_to_test)):\n",
        "        for j in range(i + 1, len(columns_to_test)):\n",
        "            col1 = columns_to_test[i]\n",
        "            col2 = columns_to_test[j]\n",
        "\n",
        "            # Handle potential errors like non-numeric data or missing values\n",
        "            try:\n",
        "                t_statistic, p_value = stats.ttest_ind(df[col1], df[col2])\n",
        "                print(f\"T-test between {col1} and {col2}:\")\n",
        "                print(f\"  T-statistic: {t_statistic}\")\n",
        "                print(f\"  P-value: {p_value}\")\n",
        "\n",
        "                alpha = 0.05\n",
        "                if p_value < alpha:\n",
        "                    print(f\"  Reject the null hypothesis. There is a statistically significant difference between {col1} and {col2}.\")\n",
        "                else:\n",
        "                    print(f\"  Fail to reject the null hypothesis. There is no statistically significant difference between {col1} and {col2}.\")\n",
        "            except (TypeError, KeyError) as e:\n",
        "                print(f\"Error performing t-test between {col1} and {col2}: {e}\")\n",
        "            except ValueError as e:\n",
        "              print(f\"Error performing t-test between {col1} and {col2}: {e}. Check for non-numeric values or missing values in the columns.\")\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: '2022hmda_data_fig_10.csv' not found. Please upload the correct file.\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jNr8H0_shGXE",
        "outputId": "71f347f0-50a2-4a1c-e49b-30c619a38f9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "T-test between hpshare_asian and hpshare_hisp_white:\n",
            "  T-statistic: -21.608096434385583\n",
            "  P-value: 7.868446729670292e-43\n",
            "  Reject the null hypothesis. There is a statistically significant difference between hpshare_asian and hpshare_hisp_white.\n",
            "T-test between hpshare_asian and hpshare_nonhisp_white:\n",
            "  T-statistic: -122.00983281607293\n",
            "  P-value: 5.1393121080919154e-126\n",
            "  Reject the null hypothesis. There is a statistically significant difference between hpshare_asian and hpshare_nonhisp_white.\n",
            "Error performing t-test between hpshare_asian and white: 'white'\n",
            "T-test between hpshare_hisp_white and hpshare_nonhisp_white:\n",
            "  T-statistic: -118.96274963949851\n",
            "  P-value: 9.922749164767664e-125\n",
            "  Reject the null hypothesis. There is a statistically significant difference between hpshare_hisp_white and hpshare_nonhisp_white.\n",
            "Error performing t-test between hpshare_hisp_white and white: 'white'\n",
            "Error performing t-test between hpshare_nonhisp_white and white: 'white'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Asian vs. Hispanic White:\n",
        "\n",
        "There is a statistically significant difference in homeownership rates between Asians and Hispanic Whites.\n",
        "The negative t-statistic indicates that Asians have a higher homeownership rate than Hispanic Whites.\n",
        "Asian vs. Non-Hispanic White:\n",
        "\n",
        "There is a statistically significant difference in homeownership rates between Asians and Non-Hispanic Whites.\n",
        "The negative t-statistic indicates that Asians have a higher homeownership rate than Non-Hispanic Whites.\n",
        "Hispanic White vs. Non-Hispanic White:\n",
        "\n",
        "There is a statistically significant difference in homeownership rates between Hispanic Whites and Non-Hispanic Whites.\n",
        "The negative t-statistic indicates that Hispanic Whites have a lower homeownership rate than Non-Hispanic Whites.\n",
        "Errors in the Analysis:\n",
        "\n",
        "The errors you encountered when comparing \"white\" with other groups likely stem from the ambiguity of the term \"white.\" It's possible that \"white\" is not a distinct category in your dataset or that it overlaps with \"Non-Hispanic White.\"\n",
        "\n",
        "Further Analysis and Considerations:\n",
        "\n",
        "To gain a deeper understanding of the disparities, consider the following:\n",
        "\n",
        "Control for Other Factors:\n",
        "Analyze the impact of other factors like income, education, and location on homeownership rates.\n",
        "Use statistical techniques like regression analysis to control for these factors and isolate the effect of race/ethnicity.\n",
        "Historical Context:\n",
        "Consider historical factors like redlining, discriminatory lending practices, and other systemic barriers that may have contributed to persistent racial disparities.\n",
        "Policy Implications:\n",
        "Use the analysis to inform policy decisions aimed at reducing racial disparities in homeownership."
      ],
      "metadata": {
        "id": "N-WeUuF3iJ9O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: visualization raph above tests\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "\n",
        "# Assuming '2022hmda_data_fig_10.csv' is already uploaded\n",
        "try:\n",
        "    df = pd.read_csv('2022hmda_data_fig_10.csv')\n",
        "\n",
        "    # Replace with your actual column names\n",
        "    columns_to_test = ['hpshare_asian', 'hpshare_hisp_white', 'hpshare_nonhisp_white']\n",
        "\n",
        "    # Perform t-tests and store results\n",
        "    results = []\n",
        "    for i in range(len(columns_to_test)):\n",
        "        for j in range(i + 1, len(columns_to_test)):\n",
        "            col1 = columns_to_test[i]\n",
        "            col2 = columns_to_test[j]\n",
        "\n",
        "            try:\n",
        "                t_statistic, p_value = stats.ttest_ind(df[col1], df[col2])\n",
        "                results.append({\n",
        "                    'Group1': col1,\n",
        "                    'Group2': col2,\n",
        "                    'T-statistic': t_statistic,\n",
        "                    'P-value': p_value\n",
        "                })\n",
        "            except (TypeError, KeyError, ValueError) as e:\n",
        "                print(f\"Error performing t-test between {col1} and {col2}: {e}\")\n",
        "\n",
        "\n",
        "    # Create a bar plot of the p-values\n",
        "    p_values = [result['P-value'] for result in results]\n",
        "    group_pairs = [f\"{result['Group1']} vs {result['Group2']}\" for result in results]\n",
        "\n",
        "\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.bar(group_pairs, p_values)\n",
        "    plt.xlabel(\"Group Comparisons\")\n",
        "    plt.ylabel(\"P-value\")\n",
        "    plt.title(\"T-test P-values for Homeownership Rates\")\n",
        "    plt.xticks(rotation=45, ha=\"right\")  # Rotate x-axis labels for better readability\n",
        "    plt.tight_layout()  # Adjust layout to prevent labels from overlapping\n",
        "    plt.show()\n",
        "\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: '2022hmda_data_fig_10.csv' not found. Please upload the correct file.\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "id": "X6dJv_deiPB6",
        "outputId": "356a8875-e3db-46e1-d2b8-168116653055",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv('2022hmda_data_fig_2.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "id": "EY0aXnXTUnnP",
        "outputId": "edd0699b-aa8d-4521-e9ce-dc9658618286"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8000814d-fc66-47b8-ac65-c2c3d57466ad\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8000814d-fc66-47b8-ac65-c2c3d57466ad\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 2022hmda_data_fig_2.csv to 2022hmda_data_fig_2.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: hp_refi, mean_dpts, median_dpts, percent_paidpts. year and visualization\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming '2022hmda_data_fig_2.csv' is already uploaded and df is defined\n",
        "try:\n",
        "    # ... (your existing code to read the CSV and perform t-tests)\n",
        "\n",
        "    # Now, let's create the visualizations\n",
        "    plt.figure(figsize=(12, 6))\n",
        "\n",
        "    # Line plot for hp_refi over time (assuming 'year' column exists)\n",
        "    plt.subplot(1, 2, 1)  # Create a subplot for the line plot\n",
        "    plt.plot(df['year'], df['hp_refi'], marker='o')\n",
        "    plt.xlabel(\"Year\")\n",
        "    plt.ylabel(\"hp_refi\")\n",
        "    plt.title(\"hp_refi Over Time\")\n",
        "\n",
        "    # Scatter plot for mean_dpts vs. median_dpts\n",
        "    plt.subplot(1, 2, 2)  # Create a subplot for the scatter plot\n",
        "    plt.scatter(df['mean_dpts'], df['median_dpts'])\n",
        "    plt.xlabel(\"Mean Down Payments\")\n",
        "    plt.ylabel(\"Median Down Payments\")\n",
        "    plt.title(\"Mean vs. Median Down Payments\")\n",
        "\n",
        "    plt.tight_layout()  # Adjust layout for better spacing between subplots\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "    # Create a bar chart for percent_paidpts\n",
        "    plt.figure(figsize=(8, 6))  # Adjust figure size if needed\n",
        "    plt.bar(df['year'], df['percent_paidpts'])  # Assuming 'year' is your x-axis\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Percent Paid Points')\n",
        "    plt.title('Percent Paid Points Over Time')\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found in DataFrame: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "vafs8XZUU9dc",
        "outputId": "cd9e83e1-d5e0-4003-f7a1-e1de8027ad12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAIjCAYAAAAQgZNYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABCfklEQVR4nO3deVxU9f7H8fewiyhuLIpccTfcMLgalVui3NLKzETLRFKz1JvFr0XNJCulMs0WS7Ncykpy69bNJEOtLEpzySWzNBEtWZQERQNlzu+PHs5tAnXGBsajr+fjcR4P5jvfc87nzBf17ZnvOcdiGIYhAAAAwIQ83F0AAAAAcKEIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswBwgSwWix5//PHz9nv88cdlsVgqv6C/cLQ+/D0LFiyQxWJRVlaWu0sBLkuEWeASduYf2TOLn5+fWrRooTFjxig3N9fd5f1t33//vR5//HGHQ8SZUHlm8ff3V2RkpCZOnKiioqLKLdYBQ4cOtauvZs2aat++vaZPn66SkpIqrWXq1Kl6//33Xb7dnTt3avDgwQoLC5Ovr68aNGigO+64Qzt37nT5vv6Obt262Y3F2Rb+swC4n5e7CwBQ+Z544gk1btxYv//+u9avX69XX31VK1eu1I4dO+Tv7+/u8i7Y999/r8mTJ6tbt26KiIhweL1XX31VAQEBOn78uD755BNNmTJFa9as0ZdffunUGdSTJ0/Ky8u1f436+vrq9ddflyQdPXpUy5Yt04MPPqiNGzdq8eLFTm3r79Q3depU9e/fX3379r2g9SuyfPlyDRo0SHXq1NGwYcPUuHFjZWVl6Y033tDSpUu1ePFi3XLLLS7b39/x6KOPavjw4bbXGzdu1IsvvqgJEyboiiuusLW3a9dOrVu31sCBA+Xr6+uOUoHLHmEWuAxcf/31iomJkSQNHz5cdevW1YwZM/Sf//xHgwYN+lvbPnHihOkCcf/+/VWvXj1J0j333KNbb71Vy5cv19dff63Y2FiHt+Pn5+fy2ry8vDR48GDb61GjRqlTp05KS0vTjBkz1KBBA7fWd6H27t2rO++8U02aNNHnn3+uoKAg23tjx45V586ddeedd2rbtm1q0qRJldVVXFys6tWrl2vv2bOn3Ws/Pz+9+OKL6tmzp7p161auv6enZ2WVCOA8mGYAXIauu+46SdK+fftsbYsWLVJ0dLSqVaumOnXqaODAgTpw4IDdet26dVObNm20adMmdenSRf7+/powYYIk6ffff9fjjz+uFi1ayM/PT/Xr11e/fv20d+9e2/pWq1UzZ85U69at5efnp5CQEI0cOVK//fab3X4iIiLUp08frV+/Xh07dpSfn5+aNGmiN99809ZnwYIFuu222yRJ3bt3t33tu27dur/1eZSWlmrSpEmKjo5WYGCgqlevrs6dO2vt2rXl1qvoa+b169frn//8p/z8/NS0aVPNmTPH6Xr+zMPDwxaezkynyMvL07BhwxQSEiI/Pz+1b99eCxcuPG99Z6ZZ7NmzR0OHDlWtWrUUGBiopKQknThxwm694uJiLVy40Pa5Dh06VJJ07Ngx3X///YqIiJCvr6+Cg4PVs2dPbd68+ZzHMW3aNJ04cUKvvfaaXZCVpHr16mnOnDkqLi7Ws88+K0launSpLBaLPvvss3LbmjNnjiwWi3bs2GFr++GHH9S/f3/VqVNHfn5+iomJ0QcffGC33plpN5999plGjRql4OBgNWzY8Jx1O6KiObNnfofXrVunmJgYVatWTW3btrX9fi5fvlxt27aVn5+foqOjtWXLlnLbdeSYAHBmFrgsnQmYdevWlSRNmTJFjz32mAYMGKDhw4crPz9fL730krp06aItW7aoVq1atnWPHDmi66+/XgMHDtTgwYMVEhKisrIy9enTRxkZGRo4cKDGjh2rY8eOafXq1dqxY4eaNm0qSRo5cqQWLFigpKQk3Xfffdq3b59efvllbdmyRV9++aW8vb1t+9mzZ4/69++vYcOGKTExUfPmzdPQoUMVHR2t1q1bq0uXLrrvvvvKffX756+AL+TzKCoq0uuvv65BgwZpxIgROnbsmN544w3Fx8drw4YNioqKOut2tm/frl69eikoKEiPP/64Tp8+rZSUFIWEhDhd09nqO3nypLp166Y9e/ZozJgxaty4sZYsWaKhQ4fq6NGjGjt27Hm3N2DAADVu3FipqanavHmzXn/9dQUHB+uZZ56RJL311lsaPny4OnbsqLvvvluSbGN4zz33aOnSpRozZowiIyN15MgRrV+/Xrt27dKVV1551n1++OGHioiIUOfOnSt8v0uXLoqIiNBHH30kSerdu7cCAgL03nvvqWvX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9jP3B72Qdc/mzFmzP38W33zzjTIzM8+7Xnx8vN5//31lZ2fb2nft2qX09HSX1XfDDTcoJydHaWlptrbTp0/rpZdeUkBAQLkr/y9U9erVy32uZWVlKiwstGsLDg5WgwYNzvuEsoceekjVqlXTyJEjy/1OFRQU6J577pG/v78eeughu/fi4uJUp04dpaWlKS0tTR07drSbJhAcHKxu3bppzpw5OnToULn95ufnO3K4F5VL8ZiAysSZWeAy17RpUz311FMaP368srKy1LdvX9WoUUP79u3TihUrdPfdd+vBBx885zaGDBmiN998U8nJydqwYYM6d+6s4uJiffrppxo1apRuvvlmde3aVSNHjlRqaqq2bt2qXr16ydvbWz/99JOWLFmiF154Qf3793eq9qioKHl6euqZZ55RYWGhfH19dd111511Xq4j+vTpo+XLl+uWW25R7969tW/fPs2ePVuRkZE6fvz4OdedPHmyVq1apc6dO2vUqFG2kNm6devzfsXuqLvvvltz5szR0KFDtWnTJkVERGjp0qX68ssvNXPmzPNeZOWo6Ohoffrpp7YHNTRu3FgtW7ZUw4YN1b9/f7Vv314BAQH69NNPtXHjRk2fPv2c22vevLkWLlyoO+64Q23bti33BLDDhw/r3XffLTd/2dvbW/369dPixYtVXFys5557rty2Z82apWuvvVZt27bViBEj1KRJE+Xm5iozM1MHDx7Ud99955LPpCpdiscEVBbCLACNGzdOLVq00PPPP6/JkydL+uMilV69eummm2467/qenp5auXKlpkyZonfeeUfLli1T3bp1bf8YnzF79mxFR0drzpw5mjBhgry8vBQREaHBgwfrmmuucbru0NBQzZ49W6mpqRo2bJjKysq0du3avxVmhw4dqpycHM2ZM0fp6emKjIzUokWLtGTJkvM+kKFdu3ZKT09XcnKyJk2apIYNG2ry5Mk6dOiQy8JstWrVtG7dOo0bN04LFy5UUVGRWrZsqfnz59sebOAKM2bM0N13362JEyfq5MmTSkxM1GuvvaZRo0bpk08+sd0Fo1mzZnrllVd07733nnebt912m1q1aqXU1FRbgK1bt666d++uCRMm2O4b+1cJCQl6/fXXZbFYNGDAgHLvR0ZG6ttvv9XkyZO1YMECHTlyRMHBwerQoYMmTZr0tz8Ld7gUjwmoLBbDFVdT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wiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABMizALAAAA0yLMAgAAwLQIswAAADAtwiwAAABM66IIs7NmzVJERIT8/PzUqVMnbdiw4Zz9lyxZolatWsnPz09t27bVypUrq6hSAAAAXEzcHmbT0tKUnJyslJQUbd68We3bt1d8fLzy8vIq7P/VV19p0KBBGjZsmLZs2aK+ffuqb9++2rFjRxVXDgAAAHdze5idMWOGRowYoaSkJEVGRmr27Nny9/fXvHnzKuz/wgsv6F//+pceeughXXHFFXryySd15ZVX6uWXX67iygEAAOBuXu7ceWlpqTZt2qTx48fb2jw8PBQXF6fMzMwK18nMzFRycrJdW3x8vN5///0K+5eUlKikpMT2urCwUJJUVFT0N6t3nLXkRJXtC/9T2WPMuLpHZY4rY+oe/Fm9NPFn9dJTldnpzL4MwzhvX7eG2cOHD6usrEwhISF27SEhIfrhhx8qXCcnJ6fC/jk5ORX2T01N1eTJk8u1h4eHX2DVMIvAme6uAJWBcb30MKaXJsb10uOOMT127JgCAwPP2cetYbYqjB8/3u5MrtVqVUFBgerWrSuLxeLGyi5+RUVFCg8P14EDB1SzZk13lwMXYVwvPYzppYlxvfQwpo4zDEPHjh1TgwYNztvXrWG2Xr168vT0VG5url17bm6uQkNDK1wnNDTUqf6+vr7y9fW1a6tVq9aFF30ZqlmzJn/oLkGM66WHMb00Ma6XHsbUMec7I3uGWy8A8/HxUXR0tDIyMmxtVqtVGRkZio2NrXCd2NhYu/6StHr16rP2BwAAwKXL7dMMkpOTlZiYqJiYGHXs2FEzZ85UcXGxkpKSJElDhgxRWFiYUlNTJUljx45V165dNX36dPXu3VuLFy/Wt99+q9dee82dhwEAAAA3cHuYTUhIUH5+viZNmqScnBxFRUVp1apVtou8srOz5eHxvxPIV199td555x1NnDhREyZMUPPmzfX++++rTZs27jqES5avr69S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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Comparison analysis of home purchase and refinancing:\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv('2022hmda_data_fig_2.csv')\n",
        "\n",
        "try:\n",
        "    # ... (your existing code to read the CSV and perform t-tests)\n",
        "\n",
        "    # Now, let's create the visualizations\n",
        "    plt.figure(figsize=(12, 6))\n",
        "\n",
        "    # Line plot for hp_refi over time (assuming 'year' column exists)\n",
        "    plt.subplot(1, 2, 1)  # Create a subplot for the line plot\n",
        "    plt.plot(df['year'], df['hp_refi'], marker='o')\n",
        "    plt.xlabel(\"Year\")\n",
        "    plt.ylabel(\"hp_refi\")\n",
        "    plt.title(\"hp_refi Over Time\")\n",
        "\n",
        "    # Scatter plot for mean_dpts vs. median_dpts\n",
        "    plt.subplot(1, 2, 2)  # Create a subplot for the scatter plot\n",
        "    plt.scatter(df['mean_dpts'], df['median_dpts'])\n",
        "    plt.xlabel(\"Mean Down Payments\")\n",
        "    plt.ylabel(\"Median Down Payments\")\n",
        "    plt.title(\"Mean vs. Median Down Payments\")\n",
        "\n",
        "    plt.tight_layout()  # Adjust layout for better spacing between subplots\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "    # Create a bar chart for percent_paidpts\n",
        "    plt.figure(figsize=(8, 6))  # Adjust figure size if needed\n",
        "    plt.bar(df['year'], df['percent_paidpts'])  # Assuming 'year' is your x-axis\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Percent Paid Points')\n",
        "    plt.title('Percent Paid Points Over Time')\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found in DataFrame: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8zgwfoPWX4Wh",
        "outputId": "b6a9a4e7-730a-4d39-d950-1ccaec740901"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a6792700-4e33-4eca-9cf8-2685f3520aa1\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a6792700-4e33-4eca-9cf8-2685f3520aa1\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 2022hmda_data_fig_2.csv to 2022hmda_data_fig_2 (1).csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: Comparison of home purchase and refinancing: By comparing the amounts and proportions of payments for home purchase and refinancing, you can understand the characteristics of each.\n",
        "\n",
        "import pandas as pd\n",
        "from scipy import stats\n",
        "import matplotlib.pyplot as plt\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv('2022hmda_data_fig_2.csv')\n",
        "\n",
        "try:\n",
        "    # ... (your existing code to read the CSV and perform t-tests)\n",
        "\n",
        "    # Now, let's create the visualizations\n",
        "    plt.figure(figsize=(12, 6))\n",
        "\n",
        "    # Line plot for hp_refi over time (assuming 'year' column exists)\n",
        "    plt.subplot(1, 2, 1)  # Create a subplot for the line plot\n",
        "    plt.plot(df['year'], df['hp_refi'], marker='o')\n",
        "    plt.xlabel(\"Year\")\n",
        "    plt.ylabel(\"hp_refi\")\n",
        "    plt.title(\"hp_refi Over Time\")\n",
        "\n",
        "    # Scatter plot for mean_dpts vs. median_dpts\n",
        "    plt.subplot(1, 2, 2)  # Create a subplot for the scatter plot\n",
        "    plt.scatter(df['mean_dpts'], df['median_dpts'])\n",
        "    plt.xlabel(\"Mean Down Payments\")\n",
        "    plt.ylabel(\"Median Down Payments\")\n",
        "    plt.title(\"Mean vs. Median Down Payments\")\n",
        "\n",
        "    plt.tight_layout()  # Adjust layout for better spacing between subplots\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "    # Create a bar chart for percent_paidpts\n",
        "    plt.figure(figsize=(8, 6))  # Adjust figure size if needed\n",
        "    plt.bar(df['year'], df['percent_paidpts'])  # Assuming 'year' is your x-axis\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Percent Paid Points')\n",
        "    plt.title('Percent Paid Points Over Time')\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column not found in DataFrame: {e}\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "bT28vbfcYcqR",
        "outputId": "6c9a00e5-b22b-45c8-c67c-a34ad9628705"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8a66615d-b8e4-4741-b674-fc158803f024\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8a66615d-b8e4-4741-b674-fc158803f024\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 2022hmda_data_fig_2.csv to 2022hmda_data_fig_2 (2).csv\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "uploaded = files.upload()\n",
        "df = pd.read_csv('2022hmda_data_fig_7.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "id": "6O7aZC45bO28",
        "outputId": "d9018e7e-3179-4652-aeb2-e22bd1c90b2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-08950b32-65bf-41e4-bfd5-d9b6c4e84c5e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-08950b32-65bf-41e4-bfd5-d9b6c4e84c5e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving 2022hmda_data_fig_7.csv to 2022hmda_data_fig_7 (1).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: each year, month va loan trend:  va_hp, va_noncashout_refi, va_chashuout_refi, tables\n",
        "\n",
        "try:\n",
        "    # Assuming 'year' and the relevant loan columns exist\n",
        "    plt.figure(figsize=(14, 6))\n",
        "\n",
        "    plt.plot(df['year'], df['va_hp'], label='VA Home Purchase', marker='o')\n",
        "    plt.plot(df['year'], df['va_noncashout_refi'], label='VA Non-Cashout Refi', marker='s')\n",
        "    plt.plot(df['year'], df['va_cashout_refi'], label='VA Cash-Out Refi', marker='^')\n",
        "\n",
        "    plt.xlabel('Year')\n",
        "    plt.ylabel('Loan Count or Percentage')  # Adjust label based on your data\n",
        "    plt.title('VA Loan Trends Over Time')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "except KeyError as e:\n",
        "    print(f\"Error: Column '{e}' not found in the DataFrame. Please check your column names.\")\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "id": "Qw1KPbW-ZO6V",
        "outputId": "05fa0182-9c8f-4479-e934-d689f660b5eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: Column ''year'' not found in the DataFrame. Please check your column names.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}